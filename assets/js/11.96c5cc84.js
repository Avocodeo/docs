(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{201:function(e,t,n){"use strict";n.r(t);var a=n(0),i=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"management-page-creation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#management-page-creation","aria-hidden":"true"}},[e._v("#")]),e._v(" Management Page Creation")]),e._v(" "),n("p",[e._v("To add a management page into the project the following steps will need to be completed.")]),e._v(" "),n("p",[n("code",[e._v("PATH - WFD-API/resources/views/")]),e._v("\nInside the "),n("code",[e._v("views")]),e._v(" folder, create a new folder for the title of the page that is to be added.")]),e._v(" "),n("p",[e._v("For this walkthrough, "),n("code",[e._v("recipes")]),e._v(" will be the management page being added.\nInside the new recipes folder"),n("br"),e._v(" "),n("code",[e._v("PATH - WFD-API/resources/views/recipes/")]),e._v(" create two files:")]),e._v(" "),n("ul",[n("li",[e._v("create.blade.php")]),e._v(" "),n("li",[e._v("index.blade.php")])]),e._v(" "),n("h2",{attrs:{id:"create-blade-php"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-blade-php","aria-hidden":"true"}},[e._v("#")]),e._v(" create.blade.php")]),e._v(" "),n("p",[e._v("This is the first of two dummy files, as they will load the content for the page out of the "),n("code",[e._v("recipes.vue")]),e._v(" file - which will be made below.")]),e._v(" "),n("p",[e._v("fill this page with the following:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@extends('layouts.app')\n\n@section('content')\n    <v-content>\n        this is the page\n    </v-content>\n@endsection\n")])])]),n("h2",{attrs:{id:"index-blade-php"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#index-blade-php","aria-hidden":"true"}},[e._v("#")]),e._v(" index.blade.php")]),e._v(" "),n("p",[e._v("This is the second of two files that will be used to initiate a page.")]),e._v(" "),n("p",[e._v("fill this page with the following:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@extends('layouts.app')\n\n@section('content')\n    <recipes-index></recipes-index>\n@endsection\n")])])]),n("h2",{attrs:{id:"create-the-recipes-model"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#create-the-recipes-model","aria-hidden":"true"}},[e._v("#")]),e._v(" Create the Recipes model")]),e._v(" "),n("p",[n("code",[e._v("PATH - WFD-API/app/")]),e._v("\nInside the app directory create a new model for the item you want to add.")]),e._v(" "),n("p",[n("code",[e._v("PATH - WFD-API/app/Recipe.php")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Recipe extends Model\n{\n    protected $guarded = [];\n\n    protected $with = ['recipe'];\n\n    public function recipe()\n    {\n        return $this->belongsTo(Recipe::class);\n    }\n}\n")])])]),n("p",[e._v("This sample code sets up the recipe model that will be used later to add page functionality.")]),e._v(" "),n("p",[e._v("This page is boiler plate but the section,")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    protected $with = ['recipe'];\n\n    public function recipe()\n    {\n        return $this->belongsTo(Recipe::class);\n    }\n")])])]),n("p",[e._v("uses a relationship to the "),n("code",[e._v("Category.php")]),e._v(" model as it references them on the management page.")]),e._v(" "),n("h2",{attrs:{id:"recipes-controller"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#recipes-controller","aria-hidden":"true"}},[e._v("#")]),e._v(" Recipes Controller")]),e._v(" "),n("p",[n("code",[e._v("PATH - WFD-API/app/Http/Controllers/RecipesController.php")]),e._v("\nThe controller file is where you will add in functionality for the page, such as "),n("code",[e._v("create a new recipe")]),e._v(" or list the index of recipes.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<?php\n\nnamespace App\\Http\\Controllers;\n\nclass RecipesController extends Controller\n{\n    public function index()\n    {\n        return view('recipes.index');\n    }\n\n    public function create()\n    {\n        return view('recipes.create');\n    }\n}\n")])])]),n("p",[e._v("There are two functions inside this class.")]),e._v(" "),n("p",[e._v("The first returns the view as "),n("code",[e._v("recipes.index")]),e._v(" and the second is used to add a button on the page that will allow users to create a new recipe and add it into the database.")]),e._v(" "),n("h2",{attrs:{id:"api-recipes-controller"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#api-recipes-controller","aria-hidden":"true"}},[e._v("#")]),e._v(" API Recipes Controller")]),e._v(" "),n("p",[n("code",[e._v("PATH - WFD-API/app/Http/API/Controllers/RecipesController.php")]),e._v("\nThe controller file inside the API directory is used to add the crud functions to the page, such as "),n("code",[e._v("update a recipe")]),e._v(" or "),n("code",[e._v("delete a recipe")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<?php\n\nnamespace App\\Http\\Controllers\\API;\n\nuse App\\Recipe;\nuse App\\Http\\Controllers\\Controller;\n\nclass RecipesController extends Controller\n{\n    public function index()\n    {\n        return Recipe::all();\n    }\n\n    public function show(Recipe $recipe)\n    {\n        return $recipe;\n    }\n\n    public function create()\n    {\n        return view('recipes.create');\n    }\n\n    public function store()\n    {\n        $attributes = request()->validate([\n            'name' => 'required',\n            'category_id' => 'sometimes',\n        ]);\n\n        $recipe = Recipe::create($attributes);\n\n        return response()->json([\n            'id' => $recipe->id,\n            'message' => 'recipe was successfully created'\n        ]);\n    }\n\n    public function update(Recipe $recipe)\n    {\n        $attributes = request()->validate([\n            'name' => 'required',\n            'category_id' => 'sometimes'\n        ]);\n\n        $recipe->update($attributes);\n\n        return response()->json([\n            'recipe' => $recipe->name,\n            'message' => 'recipe updated'\n        ]);\n    }\n\n    public function destroy(Recipe $recipe)\n    {\n        $recipe->delete();\n\n        return response()->json([\n            'message' => 'recipe was successfully deleted'\n        ]);\n    }\n}\n")])])]),n("p",[e._v("This file is a little long so lets break it down further.")]),e._v(" "),n("p",[e._v("The page is boiler plate except for the functions inside the class.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public function create()\n    {\n        return view('recipes.create');\n    }\n")])])]),n("p",[e._v("This function is used to create a new recipe.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public function store()\n    {\n        $attributes = request()->validate([\n            'name' => 'required',\n            'category_id' => 'sometimes',\n        ]);\n\n        $recipe = Recipe::create($attributes);\n\n        return response()->json([\n            'id' => $recipe->id,\n            'message' => 'recipe was successfully created'\n        ]);\n    }\n")])])]),n("p",[e._v("This function will store a new recipe in the database. It's using the attributes list in the model "),n("code",[e._v("name")]),e._v(" and "),n("code",[e._v("category_id")]),e._v(" as the headers that will be inserted. These are also used in the tests section to build and run the and insert test.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public function update(Recipe $recipe)\n    {\n        $attributes = request()->validate([\n            'name' => 'required',\n            'category_id' => 'sometimes'\n        ]);\n\n        $recipe->update($attributes);\n\n        return response()->json([\n            'recipe' => $recipe->name,\n            'message' => 'recipe updated'\n        ]);\n    }\n")])])]),n("p",[e._v("This function when called on a specific row will open a modal and allow the user to enter a new name and select a new category for the recipe. This category comes from the relationship that was created in the model.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    public function destroy(Recipe $recipe)\n    {\n        $recipe->delete();\n\n        return response()->json([\n            'message' => 'recipe was successfully deleted'\n        ]);\n    }\n")])])]),n("p",[e._v("This function when called on a specific row will remove the recipe from the database and then display a message alerting the user it has been completed successfully.")]),e._v(" "),n("h2",{attrs:{id:"routing-functions-to-the-management-page"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#routing-functions-to-the-management-page","aria-hidden":"true"}},[e._v("#")]),e._v(" Routing functions to the management page")]),e._v(" "),n("p",[n("code",[e._v("PATH - WFD-API/routes/api.php")])]),e._v(" "),n("p",[e._v("Here we will be linking the functions made above to the routes of the application.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("Route::get('/recipes', 'API\\RecipesController@index');\nRoute::post('/recipes', 'API\\RecipesController@store');\nRoute::get('/recipes/{recipe}', 'API\\RecipesController@show');\nRoute::patch('/recipes/{recipe}', 'API\\RecipesController@update');\nRoute::delete('/recipes/{recipe}', 'API\\RecipesController@destroy');\n")])])]),n("p",[e._v("Adding in these lines will allow the functions made above to be called on the page. This connects "),n("code",[e._v("routes")]),e._v(" the functions.")]),e._v(" "),n("h2",{attrs:{id:"adding-page-to-routes-js"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#adding-page-to-routes-js","aria-hidden":"true"}},[e._v("#")]),e._v(" Adding page to routes.js")]),e._v(" "),n("p",[n("code",[e._v("PATH - WFD-API/resources/js/routes.js")]),n("br"),e._v("\nSince this is a single page application we will have to add a path to the view so it can be loaded.")]),e._v(" "),n("p",[e._v("add in the import statement for the view at the top."),n("br"),e._v(" "),n("code",[e._v("import Recipes from './views/Recipes'")])]),e._v(" "),n("p",[e._v("next, inside the export default add in a sections for the name and path of the page.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    {\n        path: '/recipes',\n        name: 'recipes',\n        component: Recipes\n    },\n")])])]),n("p",[e._v("Here we are providing the name, component and path to this view so it can be included in the single page application (SPA) build.")]),e._v(" "),n("h2",{attrs:{id:"adding-the-page-to-the-sidebar"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#adding-the-page-to-the-sidebar","aria-hidden":"true"}},[e._v("#")]),e._v(" Adding the page to the sidebar")]),e._v(" "),n("p",[n("code",[e._v("PATH - WFD-API/resources/components/App.vue")])]),e._v(" "),n("p",[e._v("To add the page into the sidebar simply create a new entry "),n("code",[e._v("v-navigation-drawer")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('          <v-list-item to="/recipes" class="text-decoration-none">\n            <v-list-item-action>\n              <v-icon color="black" size="48">mdi-book-open-page-variant</v-icon>\n            </v-list-item-action>\n            <v-list-item-content>\n              <v-list-item-title>Recipes</v-list-item-title>\n            </v-list-item-content>\n          </v-list-item>\n')])])]),n("p",[e._v("This entry has a "),n("code",[e._v("text-decoration")]),e._v(" where an icon can be choose. In the example the "),n("code",[e._v("mdi-book-open-page-variant")]),e._v(" is the title of the icon. This can be switched for a new one to change what is shown in the sidebar.")]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("v-list-item-title")]),e._v(" will be the name shown in the side bar. At the very top of this code snippet the line"),n("br"),e._v(" "),n("code",[e._v('v-list-item to="/recipes"')]),e._v(" references the view that will be loaded when the tab is clicked.")]),e._v(" "),n("h2",{attrs:{id:"creating-the-vue-page"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#creating-the-vue-page","aria-hidden":"true"}},[e._v("#")]),e._v(" Creating the .vue page")]),e._v(" "),n("p",[n("code",[e._v("PATH - WFD-API/resources/views/Recipes.vue")]),n("br"),e._v("\nThis is where the page will be built out. Pages are designed with the Vue JS library. There is a wide selection of pre-built components that can be inclided use or components can be built.")]),e._v(" "),n("p",[e._v("More information about "),n("a",{attrs:{href:"https://vuejs.org/v2/guide/components.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue JS Components"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v("Here is the full source code for the Recipes.vue page that can be used as a sample.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n  <v-card>\n    <v-card-title>\n      Recipes\n      <v-spacer></v-spacer>\n      <v-text-field\n        v-model="search"\n        append-icon="mdi-magnify"\n        label="Search"\n        single-line\n        hide-details\n      ></v-text-field>\n    </v-card-title>\n    <v-data-table\n      :headers="headers"\n      :items="recipes"\n      :search="search"\n      :loading="loading"\n      loading-text="Loading Recipes... Please wait"\n    >\n      <template v-slot:item.action="{ item }">\n        <v-icon small class="mr-2" @click="editItem(item)">mdi-pencil</v-icon>\n        <v-icon small @click="deleteItem(item)">mdi-delete</v-icon>\n      </template>\n      <template v-slot:no-data>\n        <v-btn color="primary" @click="initialize">Reset</v-btn>\n      </template>\n    </v-data-table>\n    <v-dialog v-model="dialog" max-width="500px">\n      <template v-slot:activator="{ on }">\n        <v-btn color="primary" dark class="mb-2" v-on="on">New Item</v-btn>\n      </template>\n      <v-card>\n        <v-card-title>\n          <span class="headline">{{ formTitle }}</span>\n        </v-card-title>\n\n        <v-card-text>\n            <v-container>\n                <v-row>\n                    <v-col cols="12" md="6">\n                        <v-text-field v-model="editedItem.name" label="Recipe Name"></v-text-field>\n                    </v-col>\n                    <v-col cols="12" md="6">\n                        <v-select v-model="editedItem.category" :items="categories" label="Category" item-text="name" item-value="id" return-object prepend-icon="mdi-scale-balance"></v-select>\n                    </v-col>\n                </v-row>\n            </v-container>\n        </v-card-text>\n\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn color="blue darken-1" text @click="close">Cancel</v-btn>\n          <v-btn color="blue darken-1" text @click="save">Save</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n    <v-snackbar v-model="snackbar" :timeout="snackbarTimeout">\n      {{ snackbarText }}\n      <v-btn color="blue" text @click="snackbar = false">Close</v-btn>\n    </v-snackbar>\n  </v-card>\n</template>\n\n<script>\n    export default {\n        data () {\n            return {\n                search: \'\',\n                headers: [\n                    {\n                        text: \'Name\',\n                        align: \'left\',\n                        sortable: false,\n                        value: \'name\',\n                    },\n                    { text: "Category", value: "category.name" },\n                    { text: \'Created At\', value: \'created_at\' },\n                    { text: \'Updated At\', value: \'updated_at\' },\n                    { text: \'Actions\', value: \'action\', sortable: false },\n                ],\n                recipes: [],\n                categories: [{\n                    text: \'Salt\',\n                    value: 1\n                }],\n                editedIndex: -1,\n                editedItem: {\n                    name: \'\',\n                    category: \'\',\n                },\n                defaultItem: {\n                    name: \'\',\n                    category_id: \'\',\n                },\n                loading: true,\n                dialog: false,\n                snackbar: false,\n                snackbarText: \'\',\n                snackbarTimeout: 2000,\n            }\n  },\n  computed: {\n    formTitle() {\n      return this.editedIndex === -1 ? "New Recipe" : "Edit Recipe";\n    }\n  },\n  watch: {\n    dialog(val) {\n      val || this.close();\n    }\n  },\n  created() {\n    this.getRecipes();\n    this.getCategories();\n  },\n  methods: {\n    getRecipes: function() {\n      axios\n        .get("api/recipes")\n        .then(response => {\n          this.recipes = response.data;\n          this.loading = false;\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n\n    getCategories: function() {\n      axios\n        .get("api/categories")\n        .then(response => {\n          this.categories = response.data;\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n\n    editItem(item) {\n      this.editedIndex = this.recipes.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialog = true;\n    },\n\n    deleteItem(item) {\n      const index = this.recipes.indexOf(item);\n      confirm("Are you sure you want to delete this recipe?") &&\n        this.recipes.splice(index, 1);\n      axios.delete("api/recipes/" + item.id);\n      this.snackbarText = "Recipe deleted";\n      this.snackbar = true;\n    },\n\n    close() {\n      this.dialog = false;\n      setTimeout(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      }, 300);\n    },\n    save () {\n        if (this.editedIndex > -1) {\n            Object.assign(this.recipes[this.editedIndex], this.editedItem);\n            this.snackbarText = "Recipe updated";\n            this.snackbar = true;\n            axios.patch(\'api/recipes/\' + this.editedItem.id, {\n                name: this.editedItem.name,\n                category_id: this.editedItem.category.id\n            })\n                .then(function (response) {\n                    console.log(response);\n                })\n        } else {\n            axios.post(\'api/recipes\', {\n                name: this.editedItem.name,\n                category_id: this.editedItem.category.id\n            })\n            .then(function (response) {\n                console.log(response);\n            });\n            this.recipes.push({\'name\' :  this.editedItem.name, \'category.name\' : this.editedItem.category.name });\n            this.snackbar = true;\n            this.snackbarText = "Recipe created";\n        }\n        this.close()\n    },\n}\n};\n<\/script>\n')])])]),n("p",[e._v("The top half features the components that build the visual look of the page.\nFor instnace, adding a pencil icon to the table row.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('      <template v-slot:item.action="{ item }">\n        <v-icon small class="mr-2" @click="editItem(item)">mdi-pencil</v-icon>\n        <v-icon small @click="deleteItem(item)">mdi-delete</v-icon>\n      </template>\n')])])]),n("p",[e._v("or loading in the table headers.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('    <v-data-table\n      :headers="headers"\n      :items="recipes"\n      :search="search"\n      :loading="loading"\n      loading-text="Loading Recipes... Please wait"\n    >\n')])])]),n("p",[e._v("At the bottom is where we call the fuctions on page so they can perform their actions.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    editItem(item) {\n      this.editedIndex = this.recipes.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialog = true;\n    },\n")])])]),n("p",[e._v("Here the "),n("code",[e._v("editItem")]),e._v(" is called on the recipe row allowing for modification.")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('    deleteItem(item) {\n      const index = this.recipes.indexOf(item);\n      confirm("Are you sure you want to delete this recipe?") &&\n        this.recipes.splice(index, 1);\n      axios.delete("api/recipes/" + item.id);\n      this.snackbarText = "Recipe deleted";\n      this.snackbar = true;\n    },\n')])])]),n("p",[e._v("Here the "),n("code",[e._v("deleteItem")]),e._v(" is called to remove the row from the database.")]),e._v(" "),n("p",[e._v("These pages can be altered as needed but should adhear to the code and design guidelines in order to maintain a specific overall look and feel.")])])}),[],!1,null,null,null);t.default=i.exports}}]);